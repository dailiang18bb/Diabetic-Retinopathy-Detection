# -*- coding: utf-8 -*-
"""Liang_Dai_Deep_Learning_Final (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zRdl4AfEFrvQgn0FuBltjj0krAS1tyyW

# Deep Learning Final Project
## by Liang Dai

# Diabetic Retinopathy Detection
Identify signs of diabetic retinopathy in eye images

## Experiment Brief
* Dataset_count: 3142
* Validation_count: 858
* Testset_count: 1574
* Test Accuracy: 74.8%
* Model: InceptionV3, train last con2d layer

## Dataset prepare
"""

### upload dataset to Gdrive and then mount to Colab 
from google.colab import drive
drive.mount('/content/gdrive')

import tensorflow as tf
import numpy as np
tf.enable_eager_execution()
import pandas as pd
import os, shutil
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator




print("tensorflow version ::: " + tf.VERSION)
print("numpy version ::: " + np.version.version)

"""## Read CSV file"""

csv_path = './gdrive/My Drive/dataset/trainLabels.csv'

# dataframe = pd.read_csv(csv_path,index_col='image')
dataframe = pd.read_csv(csv_path)
dataframe.head()

dataframe[:4000]

"""## Change Images dirctory
### When the images have been move to the train and val folder, no need to run
"""

base_path = './gdrive/My Drive/dataset/'

### Create folders
directory = os.path.dirname('./gdrive/My Drive/dataset/train/')
if not os.path.exists(directory):
  os.makedirs(directory)

directory = os.path.dirname('./gdrive/My Drive/dataset/validation/')
if not os.path.exists(directory):
  os.makedirs(directory)
  
directory = os.path.dirname('./gdrive/My Drive/dataset/test/')
if not os.path.exists(directory):
  os.makedirs(directory)

  
  
for i in range(5):
  directory = os.path.dirname("./gdrive/My Drive/dataset/train/{}/".format(i))
  if not os.path.exists(directory):
    os.makedirs(directory)

for i in range(5):
  directory = os.path.dirname("./gdrive/My Drive/dataset/validation/{}/".format(i))
  if not os.path.exists(directory):
    os.makedirs(directory)

for i in range(5):
  directory = os.path.dirname("./gdrive/My Drive/dataset/test/{}/".format(i))
  if not os.path.exists(directory):
    os.makedirs(directory)

os.listdir(base_path)

for i in range(len(dataframe[:4000])):
# for i in range(5):
  file_label = dataframe.at[i, 'level']
  file_name = dataframe.at[i, 'image']
  print(file_name)
  print(file_label)
  old_dir = os.path.join(base_path,'small_dataset/',file_name + '.jpeg')
  if np.random.randint(5):
    new_dir = os.path.join(base_path,'train/', str(file_label))
  else:
    new_dir = os.path.join(base_path,'validation/', str(file_label))
  print(old_dir)
  print(new_dir)
  if os.path.exists(old_dir):
    print('MOVEEEEEEEEEEEEEEEEEEEEEEEE')
    shutil.move(old_dir, new_dir)
  print('################')

"""## Import Images"""

train_dir = './gdrive/My Drive/dataset/train/'
validation_dir = './gdrive/My Drive/dataset/validation/'


train_datagen = ImageDataGenerator(
      rescale=1./255,
      rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      fill_mode='nearest')

train_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=(299, 299),
        batch_size=20,
        class_mode='sparse')
# Note that the validation data should not be augmented!

val_datagen = ImageDataGenerator(rescale=1./255)

validation_generator = val_datagen.flow_from_directory(
        validation_dir,
        target_size=(299, 299),
        batch_size=20,
        class_mode='sparse')

"""## Model building"""

from tensorflow.keras.applications.inception_v3 import InceptionV3

# create the base pre-trained model
conv_base = InceptionV3(weights='imagenet', include_top=False,input_shape=(299, 299, 3))
conv_base.summary()

conv_base.trainable = True

set_trainable = False
for layer in conv_base.layers:
    if layer.name == 'conv2d_93':
        set_trainable = True
    if set_trainable:
        layer.trainable = True
    else:
        layer.trainable = False

# conv_base.trainable = False

model = tf.keras.models.Sequential()
model.add(conv_base)
model.add(tf.layers.Flatten())
model.add(tf.layers.Dense(256, activation='relu'))
model.add(tf.layers.Dense(5, activation='relu'))
model.summary()

model.compile(loss='sparse_categorical_crossentropy',
              optimizer=tf.train.AdamOptimizer(learning_rate=0.001),
              metrics=['accuracy'])

"""## Training"""

history = model.fit_generator(
      train_generator,
      steps_per_epoch=100,
      epochs=30,
      validation_data=validation_generator,
      validation_steps=50,
      verbose=1)



"""## Plot"""

import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.figure(figsize=(18,12))
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure(figsize=(18,12))
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

"""## Testing"""

for i in range(len(dataframe[11800:13600])):
# for i in range(5):
  file_label = dataframe.at[i+11800, 'level']
  file_name = dataframe.at[i+11800, 'image']
  print(file_name)
  print(file_label)
  old_dir = os.path.join(base_path,'test/',file_name + '.jpeg')
  new_dir = os.path.join(base_path,'test/', str(file_label))
  print(old_dir)
  print(new_dir)
  if os.path.exists(old_dir):
    print('MOVEEEEEEEEEEEEEEEEEEEEEEEE')
    shutil.move(old_dir, new_dir)
  print('################')

test_dir = './gdrive/My Drive/dataset/test/'
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
        test_dir,
        target_size=(299, 299),
        batch_size=20,
        class_mode='sparse')

test_loss, test_acc = model.evaluate_generator(test_generator, steps=50)
print('test acc:', test_acc)

